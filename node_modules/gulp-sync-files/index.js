'use strict';
var path = require('path');
var gutil = require('gulp-util');
var through = require('through2');
var tildify = require('tildify');
var dateTime = require('date-time');
var chalk = require('chalk');
var fs = require('fs');

module.exports = function (options) {
	options = options || {};
	var fileARR=[];

	

	Array.prototype.diff = function(a) {
	    return this.filter(function(i) {return a.indexOf(i) < 0;});
	};


	var filesDiff={};

	fs.readFile(".gulp-sync", 'utf8', function (err, data) {
		if (err) {
			return;
		}

		if(data.length>0){
			var json = JSON.parse(data) 
			filesDiff = json;
		}

	});



	return through.obj(function (file, enc, cb) {

		var fileName = file.path.substr(file.cwd.length+options.src.length-1);
		fileARR.push(fileName)
		this.push(file);
		cb();

	}, function (cb) {
		

		var diffArr= filesDiff[options.name]
		if(diffArr != undefined && diffArr.length>0){
			
			var diff = diffArr.diff( fileARR );  

			diff.forEach(function(f){
				fs.unlink(options.dest+f, function(err) {
				    if(err) {
				      
				    } else {
				        
				    }
				})
			})

		}

		var json = filesDiff;
		json[options.name] = fileARR

		fs.writeFile(".gulp-sync", JSON.stringify(json), function(err) {
		    if(err) {
		       
		    } else {

		        gutil.log('gulp-sync-files: '  + chalk.magenta('end') + ' event fired ' + chalk.gray('(' + dateTime() + ')'));
		        cb();
		    }
		}); 


		
	});
};
